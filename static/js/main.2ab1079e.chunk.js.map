{"version":3,"sources":["components/InGame.js","App.js","index.js"],"names":["CP_LOCATION","latitude","longitude","InGame","props","useState","locationText","setLocationText","location","setLocation","cpFlag","setCPFlag","setTime","formattedTime","setFormattedTime","useEffect","_watchId","Geolocation","watchPosition","position","coords","timestamp","f","d","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","month","getMonth","day","getDate","year","getFullYear","pad","timestampToDate","console","log","JSON","stringify","error","code","message","enableHighAccuracy","timeout","distanceFilter","interval","fastestInterval","i","getDistance","clearWatch","SafeAreaView","style","styles","container","View","mapContainer","Text","scoreBarContainer","eventLogContainer","currentEnergyBarContainer","StyleSheet","create","height","Dimensions","get","width","flex","justifyContent","backgroundColor","Stack","createStackNavigator","App","NavigationContainer","Navigator","initialRouteName","Screen","name","component","options","headerLeft","title","headerStyle","AppRegistry","registerComponent","appName","runApplication","rootTag","document","getElementById"],"mappings":"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","file":"static/js/main.2ab1079e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Geolocation from 'react-native-geolocation-service';\r\nimport { getDistance } from 'geolib';\r\nimport { PermissionsAndroid } from 'react-native';\r\n\r\nimport {\r\n  Text,\r\n  View,\r\n  Dimensions,\r\n  Vibration,\r\n  TouchableHighlight,\r\n  SafeAreaView,\r\n  ScrollView,\r\n  StyleSheet,\r\n} from 'react-native';\r\n\r\nconst NUM_OF_CP = 4;\r\nconst CP_LOCATION = [\r\n  { latitude: 22.335083, longitude: 114.262832 },\r\n  { latitude: 22.33459, longitude: 114.262834 },\r\n  { latitude: 22.334605, longitude: 114.263299 },\r\n  { latitude: 22.335091, longitude: 114.263291 },\r\n];\r\nconst CP_RANGE = 5;\r\n\r\nconst timestampToDate = timestamp => {\r\n  let d = new Date(timestamp);\r\n  let hours = d.getHours(),\r\n    minutes = d.getMinutes(),\r\n    seconds = d.getSeconds(),\r\n    month = d.getMonth() + 1,\r\n    day = d.getDate(),\r\n    year = d.getFullYear() % 100;\r\n\r\n  function pad(d) {\r\n    return (d < 10 ? '0' : '') + d;\r\n  }\r\n\r\n  let formattedDate =\r\n    pad(hours) +\r\n    ':' +\r\n    pad(minutes) +\r\n    ':' +\r\n    pad(seconds) +\r\n    ' ' +\r\n    pad(month) +\r\n    '-' +\r\n    pad(day) +\r\n    '-' +\r\n    pad(year);\r\n  return formattedDate;\r\n};\r\n\r\nconst InGame = props => {\r\n  const [locationText, setLocationText] = useState('');\r\n  const [location, setLocation] = useState('a');\r\n  const [cpFlag, setCPFlag] = useState(-1);\r\n  const [time, setTime] = useState(0);\r\n  const [formattedTime, setFormattedTime] = useState('');\r\n  useEffect(() => {\r\n    const _watchId = Geolocation.watchPosition(\r\n      position => {\r\n        setLocation(position.coords);\r\n        setTime(position.timestamp);\r\n        let f = timestampToDate(position.timestamp);\r\n        setFormattedTime(f);\r\n        console.log('Location updated at ' + f);\r\n        setLocationText(\r\n          'Latitude: ' +\r\n          JSON.stringify(position.coords.latitude) +\r\n          '\\n' +\r\n          'Longitude: ' +\r\n          JSON.stringify(position.coords.longitude),\r\n        );\r\n      },\r\n      error => {\r\n        // See error code charts below.\r\n        console.log(error.code, error.message);\r\n      },\r\n      {\r\n        enableHighAccuracy: true,\r\n        timeout: 15000,\r\n        distanceFilter: 1,\r\n        interval: 1000,\r\n        fastestInterval: 1000,\r\n      },\r\n    );\r\n    setCPFlag(-1);\r\n    if (location != 'a') {\r\n      for (let i = 0; i < NUM_OF_CP; i++) {\r\n        if (getDistance(location, CP_LOCATION[i]) <= CP_RANGE) {\r\n          setCPFlag(i);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return () => {\r\n      if (_watchId) {\r\n        Geolocation.clearWatch(_watchId);\r\n      }\r\n    };\r\n  }, [location]);\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <View style={styles.mapContainer}>\r\n        <Text>{locationText}</Text>\r\n        <Text>{formattedTime}</Text>\r\n        <Text>{cpFlag}</Text>\r\n      </View>\r\n      <View style={styles.scoreBarContainer}>\r\n        <Text>Score</Text>\r\n      </View>\r\n      <View style={styles.eventLogContainer}>\r\n        <Text>Event Log</Text>\r\n      </View>\r\n      <View style={styles.currentEnergyBarContainer}>\r\n        <Text>Energy Bar</Text>\r\n      </View>\r\n      <View></View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default InGame;\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    position: \"absolute\",\r\n    height: Dimensions.get(\"window\").height,\r\n    width: Dimensions.get(\"window\").width,\r\n  },\r\n  mapContainer: {\r\n    flex: 0.6,\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"tomato\",\r\n  },\r\n  scoreBarContainer: {\r\n    flex: 0.1,\r\n    backgroundColor: \"yellow\",\r\n  },\r\n  eventLogContainer: {\r\n    flex: 0.15,\r\n    backgroundColor: \"blue\",\r\n  },\r\n  currentEnergyBarContainer: {\r\n    flex: 0.15,\r\n    backgroundColor: \"orange\",\r\n  },\r\n});\r\n","import 'react-native-gesture-handler';\r\nimport * as React from 'react';\r\nimport { View } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\n\r\nimport InGame from './components/InGame';\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nconst App = props => {\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator initialRouteName=\"InGame\">\r\n        <Stack.Screen\r\n          name=\"InGame\"\r\n          component={InGame}\r\n          options={{\r\n            headerLeft: null,\r\n            title: null,\r\n            headerStyle: {\r\n              backgroundColor: \"black\",\r\n            },\r\n          }}\r\n        />\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","/**\r\n * @format\r\n */\r\n\r\nimport { AppRegistry } from 'react-native';\r\nimport App from './App';\r\nimport { name as appName } from './app.json';\r\n\r\nAppRegistry.registerComponent(appName, () => App);\r\nAppRegistry.runApplication(appName, {\r\n  rootTag: document.getElementById('root'),\r\n});\r\n"],"sourceRoot":""}